#!/bin/bash
###################################
# sote                            #
# https://github.com/krkn/sote    #
#                                 #
# Copyright (c) 2014 krkn         #
# Licensed under the MIT license. #
###################################

SOTE_URL="https://raw.githubusercontent.com/krkn/sote/master/bin/sote"
SOTE_PATH="$HOME/.sote/bin"
SOTE_SCRIPT="$SOTE_PATH/sote"
SOTE_STORE="$HOME/.sote-store"

# -----------------------------------------------------------------------------

# Installation procedure
if [[ ! -f "$SOTE_SCRIPT" ]]; then
    if [[ ! -d "$SOTE_PATH" ]]; then
        mkdir -p $SOTE_PATH
    fi

    if [[ $(basename $0) != "sote" ]]; then
        echo -e "\tDownloading"
        curl -sS -o $SOTE_SCRIPT $SOTE_URL
    else
        echo -e "\tLocal install"
        cp $0 $SOTE_SCRIPT
    fi
fi

# Add to profile
for FILE in $HOME/.profile $HOME/.bash_profile $HOME/.bashrc; do
    if [[ -f $FILE ]]; then
        if [[ $(grep -s "$SOTE_PATH" $FILE) ]]; then
            unset FILE; break
        fi
    fi
done

if [[ -f $FILE ]]; then
    echo -e "\tAdd Sote to your $FILE"
    echo "source $SOTE_SCRIPT" >> $FILE
fi

# -----------------------------------------------------------------------------
sote() {

    # sote vars

    local version=0.1.4
    local store="$SOTE_STORE"

    # reset colors

    local NONE="\033[0m"

    # regular colors

    local K="\033[0;30m"    # black
    local R="\033[0;31m"    # red
    local G="\033[0;32m"    # green
    local Y="\033[0;33m"    # yellow
    local B="\033[0;34m"    # blue
    local M="\033[0;35m"    # magenta
    local C="\033[0;36m"    # cyan
    local W="\033[0;37m"    # white

    # emphasized (bolded) colors

    local EMK="\033[1;30m"
    local EMR="\033[1;31m"
    local EMG="\033[1;32m"
    local EMY="\033[1;33m"
    local EMB="\033[1;34m"
    local EMM="\033[1;35m"
    local EMC="\033[1;36m"
    local EMW="\033[1;37m"

    # usage text

    local usage="
    ${EMY}Usage: ${W}sote ${G}[options] ${C}<name>

        ${W}Jumps to the path corresponding to the given name.

    ${EMG}Options:

        ${G}-h, --help                   ${W}Output usage information
        ${G}-v, --version                ${W}Output the version number
        ${G}-l, --list                   ${W}Lists the paths stored by sote.
        ${G}-s, --show ${B}<name>            ${W}Shows the path corresponding to the given name.
        ${G}-a, --add ${B}<name> ${Y}[path]      ${W}Add the path to the store with the given name. If no path is given, use current path.
        ${G}-r, --remove ${B}<name>          ${W}Remove the path stored by sote at the given name.
        ${G}-c, --clear                  ${W}Clear all the paths stored by sote. Ask for confirmation before acting.
    "

    # Check for git

    command -v git >/dev/null 2>&1 || { echo "${EMR}error: ${NONE}sote requires ${Y}git ${NONE}but it's not installed. Aborting." >&2; return 1; }

    # Check for store file

    if [ ! -f $store ]
    then
        echo "" > $store
    fi

    # Show help if no args

    if [ $# == 0 ] ; then
        echo -e "$usage${NONE}"
        return;
    fi

    # Commands

    action=$1
    name=$2
    path=$3

    case "$action" in
        "-v"|"--version")
            echo -e "${Y}sote ${W}v$version${NONE}"
            return;
            ;;
        "-h"|"--help")
            echo -e "$usage${NONE}"
            return;
            ;;
        "--completion-keys")
            for i in $(git config --file $store --list) ; do
                i=${i//store./}
                i=${i//=*/}

                echo "$i"
            done
            return;
            ;;
        "--completion-options")
            echo "-v"
            echo "--version"
            echo "-h"
            echo "--help"
            echo "-l"
            echo "--list"
            echo "-s"
            echo "--show"
            echo "-a"
            echo "--add"
            echo "-r"
            echo "--remove"
            echo "-c"
            echo "--clear"
            return;
            ;;
        "-l"|"--list")
            savedIFS=$IFS
            IFS=$'\n'
            for i in $(git config --file $store --list) ; do
                i=${i//store./}
                d=$(echo $i | cut -d "=" -f 2)
                i=${i//=/ ${Y}›${NONE} }

                [ -d "$d" ] \
                    && echo -e "$C$i" \
                    || echo -e "${R}${i} ${R}[NOT FOUND]${NONE}"
            done
            IFS=$savedIFS
            return;
            ;;
        "-s"|"--show")
            path=$( git config --file $store --get "store.$name" )
            if [ "$path" != "" ]
            then
                echo -e "$path"
            else
                echo -e "${EMR}error: ${NONE}no entry for ${C}$name${NONE}"; exit 1
            fi
            return;
            ;;
        "-a"|"--add")
            if [ ! $path ]
            then
                path=$PWD
            else
                path=$(cd "${path}"; pwd)
            fi
            git config --file $store --replace-all "store.$name" "$path"
            echo -e "${EMY}added: ${C}$name ${Y}› ${NONE}$path${NONE}"
            return;
            ;;
        "-r"|"--remove")
            git config --file $store --unset-all "store.$name"
            echo -e "${EMY}removed: ${C}$name${NONE}"
            return;
            ;;
        "-c"|"--clear")
            read -p "Are you sure you want clear all your SOTE entries [Yn] ? " -n 1 CONFIRM
            if [[ $CONFIRM =~ ^[Yy]$ ]]; then
                echo "" > $store
                echo -e "\n${EMY}cleared${NONE}"
            fi
            return;
            ;;
        *)
            path=$( git config --file $store --get "store.$action" )
            if [ "$path" != "" ]
            then
                cd "$path"
            else
                echo -e "${EMR}error: ${NONE}no entry for ${C}$action${NONE}"
            fi
            return;
            ;;
    esac
}

_sote_complete() {
    local word=$( echo ${COMP_WORDS[COMP_CWORD]} | tr "[:upper:]" "[:lower:]")

    if [ "$COMP_CWORD" -eq 1 ]
    then
        if [ "${word:0:1}" == "-" ]
        then
            COMPREPLY=( $(compgen -o nospace -W "$(sote --completion-options)" -- "$word") )
        else
            COMPREPLY=( $(compgen -o nospace -W "$(sote --completion-keys)" -- "$word") )
        fi
    else
        local action="${COMP_WORDS[1]}"
        if [ "$COMP_CWORD" -eq 2 ]
        then
            case "$action" in
                "-s"|"--show"|"-r"|"--remove"|"-a"|"--add")
                    COMPREPLY=( $(compgen -o nospace -W "$(sote --completion-keys)" -- "$word") )
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
        else
            case "$action" in
                *)
                    compopt -o nospace
                    COMPREPLY=( $(compgen -o nospace -d "$word") )
                    ;;
            esac
        fi
    fi
}

complete -F _sote_complete sote
